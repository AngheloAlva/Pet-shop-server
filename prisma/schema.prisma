// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LifeStage {
  PUPPY
  ADULT
  SENIOR
  KITTEN
  ALL_LIFE_STAGES
}

enum ShippingMethod {
  CHILEXPRESS
  STARKEN
  CORREOS_CHILE
  SHOP_PICKUP
}

enum PetType {
  DOG
  CAT
  BIRD
  FISH
  REPTILE
  SMALL_ANIMAL
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Brand {
  id            Int         @id @default(autoincrement())
  name          String
  isAvailable   Boolean     @default(true)
  image         String
  products      Product[]
  slug          String      @unique
}

model Product {
  id            Int             @id   @default(autoincrement())
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  petType       String[]
  name          String
  miniDesc      String
  description   String
  images        String[]
  options       Option[]
  brand         Brand           @relation(fields: [brandId], references: [id])
  lifeStage     LifeStage
  brandId       Int
  isAvailable   Boolean         @default(true)
  createdAt     DateTime        @default(now())
  cart          ProductCart[]
  slug          String          @unique
  productItems  OrderItem[]
}

model Option {
  id              Int         @id @default(autoincrement())
  name            String
  price           Float
  stock           Int
  discount        Float
  productId       Int
  product         Product     @relation(fields: [productId], references: [id])
  lastModified    DateTime    @default(now())
}

model Category {
  id            Int         @id @default(autoincrement())
  name          String
  slug          String      @unique
  description   String
  image         String
  createdAt     DateTime    @default(now())
  products      Product[]
  petType       PetType     @default(DOG)
  isAvailable   Boolean     @default(true)
}

model User {
  id                  Int         @id   @default(autoincrement())
  authId              String      @unique
  name                String?
  lastName            String?
  email               String      @unique
  rut                 String?     @unique
  role                String      @default("USER")
  createdAt           DateTime    @default(now())
  isActive            Boolean     @default(true)
  address             Address[]
  phone               String?
  orders              Order[]
  cart                Cart?
}

model Cart {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [userId], references: [id])
  userId      Int             @unique
  products    ProductCart[]
  createdAt   DateTime        @default(now())
}

model ProductCart {
  id                    Int       @id @default(autoincrement())
  cart                  Cart      @relation(fields: [cartId], references: [id])
  cartId                Int
  product               Product   @relation(fields: [productId], references: [id])
  productId             Int
  quantity              Int 
  optionSelectedIndex   Int
  addedAt               DateTime  @default(now())
}

model Address {
  id                Int       @id @default(autoincrement())
  user              User      @relation(fields: [userId], references: [id])
  userId            Int       @unique
  name              String
  street            String
  number            String
  zipCode           String
  commune           String
  region            String
  isApartment       Boolean
  apartmentNumber   String?
  orders            Order[]
}

model Order {
  id                  Int               @id  @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id])
  userId              Int
  orderDate           DateTime          @default(now())
  shippingMethod      ShippingMethod
  address             Address           @relation(fields: [addressId], references: [id])
  addressId           Int
  paid                Boolean           @default(false)
  checkoutSessionId   String?
  items               OrderItem[]
  payment             Payment?
}

model Payment {
  id                Int         @id @default(autoincrement())
  order             Order       @relation(fields: [orderId], references: [id])
  orderId           Int         @unique
  amount            Float
  currency          String
  stripeSessionId   String?
  status            PaymentStatus
  createdAt         DateTime    @default(now())    
}

model OrderItem {
  id                    Int         @id   @default(autoincrement())
  order                 Order       @relation(fields: [orderId], references: [id])
  orderId               Int
  product               Product     @relation(fields: [productId], references: [id])
  productId             Int
  productName           String
  productImage          String
  productDescription    String
  productPrice          Float
  optionSelectedIndex   Int
  quantity              Int
}
